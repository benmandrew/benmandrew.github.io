---
layout:     post
title:      "Probabilistic Model Checking with PCTL"
date:       2023-07-01
categories: articles
tag:        "Project"
header:     headers/pctl.jpg
header_rendering: auto
separate_banner: true
banner_header: headers/pctl-banner.jpg
---

# State Machines

Modelling real-world systems can be done with something called **state machines**, in which we have a collection of labelled states, with transitions between them. For example, below is a state machine representing a UK traffic light, labelled with the colour the light is in a given state, with arrows representing the transitions between the states. Note that we're modelling with discrete time-steps rather than continuous time. The labelling of states is done with so-called 'atomic propositions', these are basically low-level properties that we know hold in a given state.

<img src="{{ site.s3_path }}/pctl/traffic.jpg" class="img-fluid" style="width: 40%; border-radius: 3%;">

We are allowed to have multiple outgoing transitions from a state, in which case the choice is **non-deterministic**. This allows us to model uncertain real-world behaviour, such as the fact that when the traffic light is red there is a non-zero probability that it will explode!

<img src="{{ site.s3_path }}/pctl/traffic-explosion.jpg" class="img-fluid" style="width: 60%; border-radius: 3%;">

So, while this tells us which transitions could *possibly* be taken, it says nothing about the probability of those transitions. We can extend our definition of a state machine so that each transition has a probability of being taken. For this to make sense, the probabilities of all of a node's outgoing edges must sum to one.

<img src="{{ site.s3_path }}/pctl/traffic-explosion-prob.jpg" class="img-fluid" style="width: 60%; border-radius: 3%;">

The probability of taking a particular path through the state machine, i.e. a particular sequence of connected states, is the product of the probabilities of the connecting transitions that we take along the way.

# PCTL

While this structure allows us to model real-world systems with quantified uncertainty, we would then like to be able to answer complex probabilistic questions about these systems. For example, when considering a communication protocol, we may want to verify that ‚ÄúThere is at least a 95% probability that within 5 time-steps of sending a message, we receive an acknowledgement‚Äù. To formally express statements like these, we use a logic called Probabilistic Computation Tree Logic (PCTL). This logic has a branching model of time where in a given state there may be multiple outgoing paths into future states, creating a tree structure that expands outwards as time progresses.

PCTL has the standard logical operators like negation, conjuction, implication, etc., but the fundamental temporal building block of PCTL is the ‚Äúuntil‚Äù operator:

$$
f_1 \; U_{\leq t}^{\geq p} \; f_2
$$

which says that with a probability of at least $$p$$, within $$t$$ time-steps the sub-formula $$f_2$$ will hold, and the sub-formula $$f_1$$ will hold continuously up until this point.

Let us create a model of a hungry frog who wants to eat a fly, but is very inaccurate. The frog begins in its initial state as being hungry. It tries to eat the fly, with a 10% probability of success and a 90% probability of failure. If it succeeds then the frog is satisfied, if it fails then the frog is still hungry, but is now sad as well. In this state, the fly has a 50% probability of making its escape, and so the frog stays permanently hungry and sad. Otherwise the frog gets another chance at eating it.

<img src="{{ site.s3_path }}/pctl/frog.jpg" class="img-fluid" style="width: 80%; border-radius: 3%;">

We may want to claim that there is at least a 10% probability that within 10 time-steps, the frog is satisfied (i.e. it has eaten the fly), which we would formulate as:

$$
true \; U_{\leq 10}^{\geq 0.1} \; \texttt{satisfied}
$$

(The formula $$true$$ holds vacuously in all states, which allows us to make no claims about the path taken to get to satisfaction.)

It's all well and good to claim that this formula holds in our model, but how do we validate our claim? This is where **model checking** comes in, which is a way to automatically verify whether a temporal logic formula holds in a given model.

# Model Checking

üößüöß Section under construction! üößüöß

## Links
##### Code
- PCTL GitHub repository ([link](https://github.com/benmandrew/pctl)).

##### Sources
- Hans Hansson and Bengt Jonsson. A logic for reasoning about time and reliability. *Formal Aspects of Computing*, 6:512‚Äì535, (1994) ([PDF](http://ri.diva-portal.org/smash/get/diva2:1041377/FULLTEXT01))
- Yunjeong Lee. How to make sense of model checking. *Blog post* ([link](https://www.leeyunjeong.com/blog/2020/07/31/model-checking/))
